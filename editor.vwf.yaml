# The Mars educational game content Editor created for ADL's True Game-based learning project
--- 
extends: http://vwf.example.com/scene.vwf
properties:
  backgroundColor: [ 10, 20, 30 ]
  ambientColor: [ 255, 255, 255 ]
  activeTool: camera
children:
  graph:
    extends: http://vwf.example.com/graphtool/graph.vwf
    properties:
      graphScale: 3
      gridInterval: 1
      gridLineInterval: 10
      gridLength: 100
      xAxisVisible: true
      yAxisVisible: true
      zAxisVisible: true
      gridVisible: true
      axisOpacity: 1
      gridOpacity: 0.5
      renderTop: false
      tileVisible: true
    methods:
      toggleTileVisibility: |
        this.tileVisible = !this.tileVisible;
        for ( var tile in this.children ) {
          this.children[ tile ].visible = this.tileVisible;
        }
  grid:
    extends: source/grid.vwf
    properties:
      minX: 0
      maxX: 100
      minY: 0
      maxY: 100
      gridOriginInSpace: []
      gridSquareLength: 3
      boundaryValues: []
    scripts: |
      this.initialize = function() {
        var xlen = this.maxX - this.minX;
        var ylen = this.maxY - this.minY;
        this.gridOriginInSpace = [
          Math.floor( -xlen / 2 * this.gridSquareLength ),
          Math.floor( -ylen / 2 * this.gridSquareLength )
        ];
        for ( var x = 0; x < this.maxX - this.minX; x++ ) {
          this.boundaryValues.push( new Array() );
          for ( var y = 0; y < this.maxY - this.minY; y++ ) {
            this.boundaryValues[ x ].push( 0 );
          }
        }
      }
  editTool:
    extends: http://vwf.example.com/node3.vwf
    implements: source/griddable.vwf
    properties:
      selectedObjectId: undefined
    children:
      grid:
        extends: source/grid.vwf
        properties:
          minX: 0
          maxX: 2
          minY: 0
          maxY: 3
          gridOriginInSpace: [ 0, 0 ]
          gridSquareLength: 3
          boundaryValues: []
        methods:
          updateGrid:
          moveGridOrigin:
        events:
          gridUpdated:
          gridMoved:
        scripts: |
          this.initialize = function() {
            this.updateGrid();
          }
          this.updateGrid = function( object ) {
            var gridSize, collisionMap, scene;
            if ( object ) {
              gridSize = object.gridSize;
              collisionMap = object.collisionMap;
              scene = this.find( "/" )[ 0 ];
              this.gridOriginInSpace = scene.grid.getWorldFromGrid(
                  object.currentGridSquare
                );
            }
            this.boundaryValues = [];
            if ( gridSize && gridSize.length === 2 ) {
              this.maxX = gridSize[ 0 ];
              this.maxY = gridSize[ 1 ];
            }
            for ( var x = 0; x < this.maxX - this.minX; x++ ) {
              this.boundaryValues.push( new Array() );
              for ( var y = 0; y < this.maxY - this.minY; y++ ) {
                if ( collisionMap && collisionMap[ x ] && collisionMap[ x ][ y ] ) {
                  this.boundaryValues[ x ].push( collisionMap[ x ][ y ] );
                } else {
                  this.boundaryValues[ x ].push( 0 );
                }
              }
            }
            this.gridUpdated();
          }
          this.moveGridOrigin = function( coord ) {
            var scene = this.find( "/" )[ 0 ];
            var worldGrid = scene.grid.getWorldFromGrid( coord );
            var lastOrigin = this.gridOriginInSpace;
            this.gridOriginInSpace = [ worldGrid[ 0 ], worldGrid[ 1 ] ];
            this.gridMoved( lastOrigin );
          }
methods:
  loadMap:
  deleteMap:
  loadObject:
  deleteObject:
  createObject:
  createGridDisplay:
  removeGridDisplay:
  createEditToolGrid:
  removeEditToolGrid:
  drag:
  stopDrag:
  setUpListeners:
  selectObject:
  deselectObject:
  setActiveTool:
events:
  onSceneReady:
  pointerOver:
  pointerMove:
  pointerDown:
  pointerClick:
scripts: 
  - source: editor/scene.js