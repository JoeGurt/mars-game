# The boolean function factory creates boolean function from yaml declarations.
# It also sets up the callbacks necessary to know when the boolean function 
# needs to be reevaluated. This is used to create the success and failure 
# conditions for scenarios (and hopefully for other things as well).
#
# A boolean function contains a single "clause," which is something we want to
# check (for example, an isAtPosition clause, or a hasObject clause).  The 
# clause can be an and, or, or not clause, and these clauses contain sub-
# clauses.
#
# This all leans on the declarative function executor, which treats the clauses
# as declarative functions that set up the necessary callbacks and return the
# function that performs the actual check.
--- 
extends: source/declarativeFunctionExecutor.vwf

properties:

  # The clause set contains the clauses that  we pass into the function
  # executor.  It's fine if other function sets are also added, but this 
  # provides the baseline functionality that we need.
  clauseSet:

    # arguments: an array of clauses
    and:
    or:

    # arguments: a single clause
    not:

    # arguments: object, x, y
    isAtPosition:

    # arguments: owner, object
    hasObject:

    #arguments: object
    moveFailed:
    isBlocklyExecuting:

scripts:
- source: source/booleanFunctionFactory.js
